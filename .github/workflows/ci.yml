# Automatische teststraat voor AgentOS
# Dit draait elke keer als je code pusht of een PR maakt

name: 🚀 AgentOS CI Pipeline

# Wanneer moet dit draaien?
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

# Omgevingsvariabelen
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Python code checken
  python-quality:
    name: 🐍 Python Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Code ophalen
      uses: actions/checkout@v4
      
    - name: 🐍 Python instellen
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies  
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
        
    - name: 📦 Dependencies installeren
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy bandit pip-audit
        
    - name: 🎨 Code stijl checken (ruff)
      run: ruff check . --output-format=github
      continue-on-error: false
      
    - name: 🔍 Type checking (mypy)
      run: mypy . --ignore-missing-imports
      continue-on-error: true  # Mypy mag falen, maar geef wel waarschuwing
      
    - name: 🔒 Security scan (bandit)
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: 📊 Upload security rapport
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Job 2: Tests draaien
  tests:
    name: 🧪 Tests draaien
    runs-on: ubuntu-latest
    needs: python-quality
    
    services:
      # Redis voor queue tests
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      # PostgreSQL voor database tests  
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: agentos_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Code ophalen
      uses: actions/checkout@v4
      
    - name: 🐍 Python instellen
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Dependencies installeren
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Tests draaien
      env:
        # Test database connectie
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/agentos_test
        REDIS_URL: redis://localhost:6379/0
        # Test mode aan
        TESTING: true
      run: |
        # Alle tests in de testing map
        pytest testing/ -v --tb=short
        
        # Specifieke system tests
        if [ -f "test_complete_system.py" ]; then
          pytest test_complete_system.py -v
        fi
        
        # Queue tests als ze bestaan
        if [ -f "testing/jobs-queue/test_jobs_queue.py" ]; then
          pytest testing/jobs-queue/test_jobs_queue.py -v
        fi

  # Job 3: JavaScript/Frontend checken  
  frontend-quality:
    name: 🌐 Frontend Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Code ophalen
      uses: actions/checkout@v4
      
    - name: 📦 Node.js instellen
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Dependencies installeren (ui-v2)
      working-directory: ./ui-v2
      run: |
        if [ -f "package.json" ]; then
          npm ci
        else
          echo "Geen package.json gevonden, skip frontend tests"
        fi
        
    - name: 🎨 JavaScript linting
      working-directory: ./ui-v2  
      run: |
        if [ -f "package.json" ] && grep -q "eslint" package.json; then
          npm run lint || echo "Lint script niet gevonden"
        fi
        
    - name: 🏗️ Frontend build test
      working-directory: ./ui-v2
      run: |
        if [ -f "package.json" ] && grep -q "build" package.json; then
          npm run build || echo "Build script niet gevonden"
        fi

  # Job 4: Dependency security check
  security-audit:
    name: 🔒 Dependency Security Audit  
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Code ophalen
      uses: actions/checkout@v4
      
    - name: 🐍 Python instellen
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔍 Python packages security scan
      run: |
        pip install pip-audit
        pip-audit -r requirements.txt --format=json --output=python-audit.json || true
        
    - name: 📊 Upload audit rapport
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-security-audit
        path: python-audit.json

  # Job 5: Alles samenvoegen
  summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [python-quality, tests, frontend-quality, security-audit]
    if: always()
    
    steps:
    - name: ✅ Success bericht
      if: ${{ needs.python-quality.result == 'success' && needs.tests.result == 'success' }}
      run: |
        echo "🎉 Alle checks geslaagd! Code is klaar voor merge."
        
    - name: ❌ Failure bericht  
      if: ${{ needs.python-quality.result == 'failure' || needs.tests.result == 'failure' }}
      run: |
        echo "❌ Er zijn problemen gevonden. Check de logs hierboven."
        exit 1